
 #sudo /etc/init.d/nginx start
 # sudo cp -f /mnt/c/Users/irina.kozlova/Documents/GitHub/BMSTU-Web-sem7/nginx.conf /etc/nginx/nginx.conf
 # sudo cp  /mnt/c/Users/irina.kozlova/Documents/GitHub/BMSTU-Web-sem7/nginx.conf /etc/nginx/nginx.conf


worker_processes 1;

events {
        worker_connections 1024;
        # multi_accept on;
}

http {
	# “levels=1:2” — задает уровень вложенности директорий с кэшем.
	# Уровни вложенности указываются через “:”, в данном случае будет созданы 2 директории, всего допустимо 3 уровня вложенности.
	# “keys_zone=proxy_cache:15m” параметр задает имя зоны в разделяемой памяти, где хранятся все активные ключи и информация по ним. Через “:” указывается размер выделяемой памяти в Мб. 
	# “max_size=1G” определяет максимальный размер кэша для всех страниц, при превышении которого nginx сам позаботится об удалении менее востребованных данных.
	proxy_cache_path /mycache/nginx levels=1:2 keys_zone=default_cache:10m max_size=2g;

	upstream backend {
		server host.docker.internal:5000 weight=2;
		server host.docker.internal:5004;
		server host.docker.internal:5006;
	}
    
	# главный бекенд
    upstream main_backend { 
        server host.docker.internal:5000;
    }

	upstream mirror_backend {
		server host.docker.internal:5008;
	}

	# создадим переменную, которая будет содержать бекенд, на который надо пойти (upstream_location)
	map $request_method $upstream_location { 
		GET     backend;
		default main_backend;
	}
	
	map $request_uri $api_uri { # /api/v1/statistics -> /statistics
		~^/api/v1(.*)$ $1; # /api/v1{$1} -> $1
	}

	map $request_uri $mirror_uri { # /api/v1/statistics -> /statistics
		~^/mirror/api/v1(.*)$ $1;
	}

	proxy_cache_key $scheme$request_method$host$request_uri;

    proxy_cache default_cache;
    proxy_cache_methods GET;
    proxy_cache_min_uses 2; # Задаёт число запросов, после которого ответ будет закэширован.
    proxy_cache_valid 200 301 302 120m; # Задаёт время кэширования для разных кодов ответа
    proxy_cache_valid 404 1m;

		
	server {
		server_name localhost;
		listen 443 ssl http2;
		listen 443 http3; 

		proxy_pass_header Server;
		add_header Server "skiResort" always;

		quic_retry on;
        ssl_early_data on;

        ssl_session_cache shared:SSL:5m;
        ssl_session_timeout 1h;
        ssl_session_tickets off;
        ssl_buffer_size 4k; # This is for performance rather than security, the optimal value depends on each site.

        ssl_certificate     /certs/localhost.pem;
        ssl_certificate_key /certs/localhost.key;
		ssl_trusted_certificate /certs/rootCA.pem; # For SSL-stapling
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
		ssl_stapling on;      # As of 2022-05 this version of nginx dosen't support ssl-stapling, but it might be in the future.
		ssl_stapling_verify on;
		resolver 1.1.1.1 1.0.0.1 valid=300s; # Use whichever resolvers you'd like, these are Cloudflare's and is one of the fastest DNS resolvers.
		resolver_timeout 5s;

        proxy_request_buffering off;

        add_header alt-svc 'h3=":443"; ma=86400'; # Absolutely necessary header. This informs the client that HTTP/3 is available.
        add_header Strict-Transport-Security max-age=15768000; # Optional but good, client should always try to use HTTPS, even for initial requests.


		gzip off;

		location /api/v1 {
			proxy_pass_header Server;
			proxy_pass http://$upstream_location$api_uri;
		}

		location /mirror {
			proxy_pass http://mirror_backend$mirror_uri;			
		}

		location = /api/v1 {
			return 301 http://localhost:5000/swagger/index.html;
		}

		# d Настроить / на отдачу статики (в будущем - SPA-приложения). Пока положить приветственный HTML (/static/index.html) с картинкой (static/img/image.jpg).
		# http://localhost/
		http2_push_preload on;

		location / {
			root /static;
			http2_push /img/img.jpg;
			add_header Link "</img/img.jpg>; as=image; rel=preload";
			add_header Alt-Svc 'h3=":443"; ma=86400'; # Absolutely necessary header. This informs the client that HTTP/3 is available.

		}

		# e Настроить /test на отдачу той же страницы, что и /
		# http://localhost/test/
		# Настроить /test на отдачу той же страницы, что и /
		location /test {
			rewrite ^/test/(.*)$ /$1 last;
			#или: return 301 /;
		}

		# f Настроить /admin на проксирование в админку базы данных (любую стандартную).
		location /admin {
			# proxy_pass_header Server;
			return 301 http://localhost:5050/;
		}

		# g Настроить /status на отдачу страницы статуса сервера Nginx (nginx status)
		# http://localhost/status
		location = /status {
			# proxy_pass_header Server;
			stub_status;
		}
	}
}