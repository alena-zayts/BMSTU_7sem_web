{
  "openapi": "3.0.1",
  "info": {
    "title": "SkiResort",
    "description": "API for Web Course Project",
    "version": "v1"
  },
  "paths": {
    "/account": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Log in",
        "parameters": [
          {
            "name": "userEmail",
            "in": "query",
            "description": "User's email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userPassword",
            "in": "query",
            "description": "User's password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization went successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonResult"
                }
              }
            }
          },
          "404": {
            "description": "User with such email wasn't found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Incorrect password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Register",
        "parameters": [
          {
            "name": "userEmail",
            "in": "query",
            "description": "User's email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userPassword",
            "in": "query",
            "description": "User's password",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration went successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonResult"
                }
              }
            }
          },
          "401": {
            "description": "User with such email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Continue as anauthorized (just get token)",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Log out (and get new token to be interpreted as an unauthorized user)",
        "responses": {
          "200": {
            "description": "User was successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "401": {
            "description": "User was not logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/cardReadings": {
      "get": {
        "tags": [
          "cardReadings"
        ],
        "summary": "Get information about all cardReadings",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Information about all cardReadings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CardReading"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cardReadings"
        ],
        "summary": "Add a new cardReading",
        "parameters": [
          {
            "name": "turnstileID",
            "in": "query",
            "description": "ID of the turnstile where the reading took place",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardID",
            "in": "query",
            "description": "ID of the card that was read",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingTime",
            "in": "query",
            "description": "The time of the card reading",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "The added cardReading with assigned ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardReading"
                }
              }
            }
          }
        }
      }
    },
    "/cardReadings/{recordID}": {
      "get": {
        "tags": [
          "cardReadings"
        ],
        "summary": "Get information about a cardReading by it's ID",
        "parameters": [
          {
            "name": "recordID",
            "in": "path",
            "description": "CardReading ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "CardReading with specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardReading"
                }
              }
            }
          },
          "404": {
            "description": "CardReading with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cardReadings"
        ],
        "summary": "Update information about an existing cardReading",
        "parameters": [
          {
            "name": "recordID",
            "in": "path",
            "description": "ID of the cardReading to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "turnstileID",
            "in": "query",
            "description": "ID of the turnstile where the reading took place",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cardID",
            "in": "query",
            "description": "ID of the card that was read",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingTime",
            "in": "query",
            "description": "The time of the card reading",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The cardReading was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A cardReading with specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cardReadings"
        ],
        "summary": "Delete a cardReading by it's ID",
        "parameters": [
          {
            "name": "recordID",
            "in": "path",
            "description": "ID of the cardReading to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "CardReading was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "CardReading with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/cards": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "Get information about all cards",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Information about all cards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "cards"
        ],
        "summary": "Add a new card",
        "parameters": [
          {
            "name": "activationTime",
            "in": "query",
            "description": "Time when the new card was activated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the new card",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "The added card with assigned ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          }
        }
      }
    },
    "/cards/{cardID}": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "Get information about a card by it's ID",
        "parameters": [
          {
            "name": "cardID",
            "in": "path",
            "description": "Card ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Card with specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "404": {
            "description": "Card with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "cards"
        ],
        "summary": "Update information about an existing card",
        "parameters": [
          {
            "name": "cardID",
            "in": "path",
            "description": "ID of the card to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "activationTime",
            "in": "query",
            "description": "Time when the new card was activated",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the card",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The card was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A card with specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cards"
        ],
        "summary": "Delete a card by it's ID",
        "parameters": [
          {
            "name": "cardID",
            "in": "path",
            "description": "ID of the card to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Card was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "Card with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/lifts": {
      "get": {
        "tags": [
          "lifts"
        ],
        "summary": "Get information about all lifts",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Information about all lifts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Lift"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "lifts"
        ],
        "summary": "Add a new lift",
        "description": "Note that the names of lifts should be unique.",
        "parameters": [
          {
            "name": "liftName",
            "in": "query",
            "description": "Name of the new lift",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isOpen",
            "in": "query",
            "description": "Is the new lift currently working or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "seatsAmount",
            "in": "query",
            "description": "The amount of seats in the new lift",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "liftingTime",
            "in": "query",
            "description": "The time the new lift needs to lift from the beginning to the end",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "The added lift with assigned ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lift"
                }
              }
            }
          },
          "400": {
            "description": "A lift with such name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/lifts/{liftName}": {
      "get": {
        "tags": [
          "lifts"
        ],
        "summary": "Get information about a lift by it's name",
        "parameters": [
          {
            "name": "liftName",
            "in": "path",
            "description": "Name of the lift",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Lift with specified name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiftWithSlopes"
                }
              }
            }
          },
          "404": {
            "description": "Lift with specified name not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "lifts"
        ],
        "summary": "Update information about an existing lift",
        "parameters": [
          {
            "name": "liftName",
            "in": "path",
            "description": "Name of the lift to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsOpen",
            "in": "query",
            "description": "Is the lift working right now or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "SeatsAmount",
            "in": "query",
            "description": "The amount of seats in the lift",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "LiftingTime",
            "in": "query",
            "description": "The time lift needs to lift from the beginning to the end",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The lift was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A lift with specified name was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "lifts"
        ],
        "summary": "Delete a lift by it's name",
        "parameters": [
          {
            "name": "liftName",
            "in": "path",
            "description": "Name of the lift",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Lift was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "Lift with specified name not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "lifts"
        ],
        "summary": "Add a connected slope to the lift",
        "parameters": [
          {
            "name": "liftName",
            "in": "path",
            "description": "Name of the lift to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slopeName",
            "in": "query",
            "description": "Name of the slope to add",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The lift was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A lift or a slope with specified name was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Get information about all messages",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Information about all messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Send a message",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "Text of the message",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "The added message with assigned ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/messages/{messageID}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Get information about a message by it's ID",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "Message ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Message with specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "404": {
            "description": "Message with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "messages"
        ],
        "summary": "Update information about an existing message",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "ID of the message to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "senderID",
            "in": "query",
            "description": "ID of the user who sent message",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkedByID",
            "in": "query",
            "description": "ID of the user who read message",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "Text of the message",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The message was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A message with specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "messages"
        ],
        "summary": "Mark message read by current user",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "ID of the message to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The message was marked read",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A message with specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Couldn't mark message checked because it is alredy checked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "Delete a message by it's ID",
        "parameters": [
          {
            "name": "messageID",
            "in": "path",
            "description": "ID of the message to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Message was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "Message with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/slopes": {
      "get": {
        "tags": [
          "slopes"
        ],
        "summary": "Get information about all slopes",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Information about all slopes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Slope"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "slopes"
        ],
        "summary": "Add a new slope",
        "description": "Note that the names of slopes should be unique.",
        "parameters": [
          {
            "name": "slopeName",
            "in": "query",
            "description": "Name of the new slope",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isOpen",
            "in": "query",
            "description": "Is the new slope currently working or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "difficultyLevel",
            "in": "query",
            "description": "The difficulty level of the new slope",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "The added slope with assigned ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Slope"
                }
              }
            }
          },
          "400": {
            "description": "A slope with such name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/slopes/{slopeName}": {
      "get": {
        "tags": [
          "slopes"
        ],
        "summary": "Get information about a slope by it's name",
        "parameters": [
          {
            "name": "slopeName",
            "in": "path",
            "description": "Name of the slope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Slope with specified name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlopeWithLifts"
                }
              }
            }
          },
          "404": {
            "description": "Slope with specified name not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "slopes"
        ],
        "summary": "Update information about an existing slope",
        "parameters": [
          {
            "name": "slopeName",
            "in": "path",
            "description": "Name of the slope to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isOpen",
            "in": "query",
            "description": "Is the slope currently working or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "difficultyLevel",
            "in": "query",
            "description": "The difficulty level of the new slope",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The slope was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A slope with specified name was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "slopes"
        ],
        "summary": "Delete a slope by it's name",
        "parameters": [
          {
            "name": "slopeName",
            "in": "path",
            "description": "Name of the slope",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Slope was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "Slope with specified name not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/turnstiles": {
      "get": {
        "tags": [
          "turnstiles"
        ],
        "summary": "Get information about all turnstiles",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Information about all turnstiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Turnstile"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "turnstiles"
        ],
        "summary": "Add a new turnstile",
        "parameters": [
          {
            "name": "liftID",
            "in": "query",
            "description": "ID of the lift to which the turnstile is connected",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isOpen",
            "in": "query",
            "description": "Is the turnstile currently working or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "The added turnstile with assigned ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Turnstile"
                }
              }
            }
          }
        }
      }
    },
    "/turnstiles/{turnstileID}": {
      "get": {
        "tags": [
          "turnstiles"
        ],
        "summary": "Get information about a turnstile by it's ID",
        "parameters": [
          {
            "name": "turnstileID",
            "in": "path",
            "description": "Turnstile ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Turnstile with specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Turnstile"
                }
              }
            }
          },
          "404": {
            "description": "Turnstile with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "turnstiles"
        ],
        "summary": "Update information about an existing turnstile",
        "parameters": [
          {
            "name": "turnstileID",
            "in": "path",
            "description": "ID of the turnstile to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "liftID",
            "in": "query",
            "description": "ID of the lift to which the turnstile is connected",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isOpen",
            "in": "query",
            "description": "Is the turnstile currently working or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The turnstile was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A turnstile with specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "turnstiles"
        ],
        "summary": "Delete a turnstile by it's ID",
        "parameters": [
          {
            "name": "turnstileID",
            "in": "path",
            "description": "ID of the turnstile to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Turnstile was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "Turnstile with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get information about all users",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Information about all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAccount"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "parameters": [
          {
            "name": "userEmail",
            "in": "query",
            "description": "Email of user to add",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userPassword",
            "in": "query",
            "description": "Password of user to add",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role of the user to add",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cardID",
            "in": "query",
            "description": "ID of the user's card",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "The added user with assigned ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccount"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get information about a user by it's ID",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "User with specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccount"
                }
              }
            }
          },
          "404": {
            "description": "User with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update information about an existing user",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of the user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userEmail",
            "in": "query",
            "description": "Email of user to add",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userPassword",
            "in": "query",
            "description": "Password of user to add",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Role of the user to add",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cardID",
            "in": "query",
            "description": "ID of the user's card",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The user was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "A user with specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user by it's ID",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of the user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "User was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "404": {
            "description": "User with specified ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Card": {
        "type": "object",
        "properties": {
          "cardID": {
            "type": "integer",
            "description": "Card ID",
            "format": "int32"
          },
          "activationTime": {
            "type": "string",
            "description": "The time when the card was activated",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "Type of the card",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about cards used in the resort"
      },
      "CardReading": {
        "type": "object",
        "properties": {
          "recordID": {
            "type": "integer",
            "description": "The ID of the record about card reading",
            "format": "int32"
          },
          "turnstileID": {
            "type": "integer",
            "description": "ID of the turnstile where the reading took place",
            "format": "int32"
          },
          "cardID": {
            "type": "integer",
            "description": "ID of the card that was read",
            "format": "int32"
          },
          "readingTime": {
            "type": "string",
            "description": "The time of the card reading",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Information about readings of cards on turnstiles of the resort"
      },
      "IActionResult": {
        "type": "object",
        "additionalProperties": false
      },
      "JsonResult": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "serializerSettings": {
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Lift": {
        "type": "object",
        "properties": {
          "liftID": {
            "type": "integer",
            "description": "Lift ID",
            "format": "int32"
          },
          "liftName": {
            "type": "string",
            "description": "Lift name",
            "nullable": true
          },
          "isOpen": {
            "type": "boolean",
            "description": "Is the lift working right now or not"
          },
          "seatsAmount": {
            "type": "integer",
            "description": "The amount of seats in the lift",
            "format": "int32"
          },
          "liftingTime": {
            "type": "integer",
            "description": "The time lift needs to lift from the beginning to the end",
            "format": "int32"
          },
          "queueTime": {
            "type": "integer",
            "description": "Current time in queue to the lift",
            "format": "int32",
            "default": 0
          }
        },
        "additionalProperties": false,
        "description": "Information about a lift"
      },
      "LiftWithSlopes": {
        "type": "object",
        "properties": {
          "liftID": {
            "type": "integer",
            "description": "Lift ID",
            "format": "int32"
          },
          "liftName": {
            "type": "string",
            "description": "Lift name",
            "nullable": true
          },
          "isOpen": {
            "type": "boolean",
            "description": "Is the lift working right now or not"
          },
          "seatsAmount": {
            "type": "integer",
            "description": "The amount of seats in the lift",
            "format": "int32"
          },
          "liftingTime": {
            "type": "integer",
            "description": "The time lift needs to lift from the beginning to the end",
            "format": "int32"
          },
          "queueTime": {
            "type": "integer",
            "description": "Current time in queue to the lift",
            "format": "int32",
            "default": 0
          },
          "connectedSlopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Slope"
            },
            "description": "Slopes connected to the lift",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a lift"
      },
      "Message": {
        "type": "object",
        "properties": {
          "messageID": {
            "type": "integer",
            "description": "Message ID",
            "format": "int32"
          },
          "senderID": {
            "type": "integer",
            "description": "Sender ID",
            "format": "int32"
          },
          "checkedByID": {
            "type": "integer",
            "description": "ID of the ski patrol worker who checked the message",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "description": "Text of the message",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about cards used in the resort"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Slope": {
        "type": "object",
        "properties": {
          "slopeID": {
            "type": "integer",
            "description": "Slope ID",
            "format": "int32"
          },
          "slopeName": {
            "type": "string",
            "description": "Slope name",
            "nullable": true
          },
          "isOpen": {
            "type": "boolean",
            "description": "Is the slope working right now or not"
          },
          "difficultyLevel": {
            "type": "integer",
            "description": "The difficulty level of the slope",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Information about a slope"
      },
      "SlopeWithLifts": {
        "type": "object",
        "properties": {
          "slopeID": {
            "type": "integer",
            "description": "Slope ID",
            "format": "int32"
          },
          "slopeName": {
            "type": "string",
            "description": "Slope name",
            "nullable": true
          },
          "isOpen": {
            "type": "boolean",
            "description": "Is the slope working right now or not"
          },
          "difficultyLevel": {
            "type": "integer",
            "description": "The difficulty level of the slope",
            "format": "int32"
          },
          "connectedLifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Lift"
            },
            "description": "Lifts connected to the slope",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about a slope"
      },
      "Turnstile": {
        "type": "object",
        "properties": {
          "turnstileID": {
            "type": "integer",
            "description": "Turnstile ID",
            "format": "int32"
          },
          "liftID": {
            "type": "integer",
            "description": "ID of the lift to which the turnstile is connected",
            "format": "int32"
          },
          "isOpen": {
            "type": "boolean",
            "description": "Is the turnstile currently working or not"
          }
        },
        "additionalProperties": false,
        "description": "Information about turnstiles"
      },
      "UserAccount": {
        "type": "object",
        "properties": {
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "cardID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 1safsfsdfdfd\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}